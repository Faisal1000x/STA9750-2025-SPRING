---
title: "STA 9750 Mini-Project 02: Identifying Environmentally Responsible US Public Transit Systems"
subtitle: "Green Transit Alliance for Investigation of Variance (GTA IV)"
output:
  html: default
  pdf: default
code-fold: true
toc: true
---

# Task 1: Data Import

```{r}
library(httr2)
library(rvest)
library(datasets)
library(purrr)
library(DT)
library(scales)
library(stringr)
library(dplyr)  

# Function to ensure required packages are installed and loaded
ensure_package <- function(pkg){
    pkg <- as.character(substitute(pkg))
    options(repos = c(CRAN = "https://cloud.r-project.org"))
    if(!require(pkg, character.only=TRUE)) install.packages(pkg)
    stopifnot(require(pkg, character.only=TRUE))
}

# Function to download and parse EIA State Electricity Profiles
get_eia_sep <- function(state, abbr){
    state_formatted <- str_to_lower(state) |> str_replace_all("\\s", "")
    
    # Create a directory to store data
    dir_name <- file.path("data", "mp02")
    file_name <- file.path(dir_name, paste0(state_formatted, ".html"))
    dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)
    
    # Download and save the file if it doesn't exist
    if(!file.exists(file_name)){
        BASE_URL <- "https://www.eia.gov"
        REQUEST <- request(BASE_URL) |> req_url_path("electricity", "state", state_formatted)
        RESPONSE <- req_perform(REQUEST)
        resp_check_status(RESPONSE)
        writeLines(resp_body_string(RESPONSE), file_name)
    }
    
    # Read and parse the HTML data table
    TABLE <- read_html(file_name) |> 
        html_element("table") |> 
        html_table() |> 
        mutate(Item = str_to_lower(Item))

    # Rename column if needed
    if("U.S. rank" %in% colnames(TABLE)){
        TABLE <- TABLE |> rename(Rank = `U.S. rank`)
    }
    
    # Extract key electricity data
    CO2_MWh <- TABLE |> filter(Item == "carbon dioxide (lbs/mwh)") |> pull(Value) |> str_replace_all(",", "") |> as.numeric()
    PRIMARY <- TABLE |> filter(Item == "primary energy source") |> pull(Rank)
    RATE <- TABLE |> filter(Item == "average retail price (cents/kwh)") |> pull(Value) |> as.numeric()
    GENERATION_MWh <- TABLE |> filter(Item == "net generation (megawatthours)") |> pull(Value) |> str_replace_all(",", "") |> as.numeric()

    # Create a structured dataframe
    data.frame(
        CO2_MWh = CO2_MWh,
        primary_source = PRIMARY,
        electricity_price_MWh = RATE * 10,  # Convert cents/kWh to dollars/MWh
        generation_MWh = GENERATION_MWh,
        state = state,
        abbreviation = abbr
    )
}

# Fetch electricity profile data for all U.S. states
EIA_SEP_REPORT <- map2(state.name, state.abb, get_eia_sep) |> list_rbind()

# Format and display the table
EIA_SEP_REPORT |> 
    select(-abbreviation) |> 
    arrange(desc(CO2_MWh)) |> 
    mutate(
        CO2_MWh = number(CO2_MWh, big.mark=","),
        electricity_price_MWh = dollar(electricity_price_MWh),
        generation_MWh = number(generation_MWh, big.mark=",")
    ) |> 
    rename(
        `Pounds of CO2 Emitted per MWh of Electricity Produced` = CO2_MWh,
        `Primary Source of Electricity Generation` = primary_source,
        `Average Retail Price for 1000 kWh` = electricity_price_MWh,
        `Total Generation Capacity (MWh)` = generation_MWh,
        State = state
    ) |> 
    datatable()


```

## **EIA State Electricity Profiles Analysis**

The **EIA State Electricity Profiles** dataset provides key insights into **electricity generation** across US states. It includes:\
- **CO₂ emissions per megawatt-hour (MWh)**\
- **Primary energy sources**\
- **Average retail electricity prices**\
- **Total generation capacity**

The data is extracted from **EIA state reports**, processed, and structured into a tabular format. The results highlight **significant variations in CO₂ emissions** across states:\
- States **relying heavily on coal and petroleum** have **higher emissions**.\
- States utilizing **renewables or natural gas** produce **cleaner electricity**.\
- **Electricity prices vary significantly**, reflecting **regional energy policies and infrastructure**.

## Task 2: Initial Analysis of SEP Data

```{r}
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)

glimpse(EIA_SEP_REPORT)


most_expensive_state <- EIA_SEP_REPORT |> 
    arrange(desc(electricity_price_MWh)) |> 
    select(state, electricity_price_MWh) |> 
    head(1)

print(most_expensive_state)

dirtiest_state <- EIA_SEP_REPORT |> 
    arrange(desc(CO2_MWh)) |> 
    select(state, CO2_MWh) |> 
    head(1)

print(dirtiest_state)


weighted_avg_CO2 <- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh) / sum(EIA_SEP_REPORT$generation_MWh)
print(weighted_avg_CO2)


rare_energy <- EIA_SEP_REPORT |> 
    count(primary_source, sort = TRUE) |> 
    arrange(n) |> 
    head(1)

rare_energy_state <- EIA_SEP_REPORT |> 
    filter(primary_source == rare_energy$primary_source) |> 
    select(state, primary_source, electricity_price_MWh) |> 
    arrange(electricity_price_MWh) 

print(list(rare_energy, rare_energy_state))


NY_TX_CO2 <- EIA_SEP_REPORT |> 
    filter(state %in% c("New York", "Texas")) |> 
    select(state, CO2_MWh)

clean_ratio <- NY_TX_CO2$CO2_MWh[NY_TX_CO2$state == "Texas"] / NY_TX_CO2$CO2_MWh[NY_TX_CO2$state == "New York"]
print(clean_ratio)

ensure_package <- function(pkg){
    pkg <- as.character(substitute(pkg))
    options(repos = c(CRAN = "https://cloud.r-project.org"))
    if(!require(pkg, character.only=TRUE)) install.packages(pkg)
    stopifnot(require(pkg, character.only=TRUE))
}

ensure_package(readxl)

# Create directory if it doesn't exist
DATA_DIR <- file.path("data", "mp02")
dir.create(DATA_DIR, showWarnings=FALSE, recursive=TRUE)

NTD_ENERGY_FILE <- file.path(DATA_DIR, "2023_ntd_energy.xlsx")

if(!file.exists(NTD_ENERGY_FILE)){
    DS <- download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-10/2023%20Energy%20Consumption.xlsx", 
                        destfile=NTD_ENERGY_FILE, 
                        method="curl")
    
    if(DS | (file.info(NTD_ENERGY_FILE)$size == 0)){
        cat("I was unable to download the NTD Energy File. Please try again.\n")
        stop("Download failed")
    }
}

NTD_ENERGY_RAW <- read_xlsx(NTD_ENERGY_FILE)

ensure_package(tidyr)


to_numeric_fill_0 <- function(x){
    replace_na(as.numeric(x), 0)
}

NTD_ENERGY <- NTD_ENERGY_RAW |> 
    select(-c(`Reporter Type`, `Reporting Module`, `Other Fuel`, `Other Fuel Description`)) |> 
    mutate(across(-c(`Agency Name`, `Mode`, `TOS`), to_numeric_fill_0)) |> 
    group_by(`NTD ID`, `Mode`, `Agency Name`) |> 
    summarize(across(where(is.numeric), sum), .groups = "keep") |> 
    mutate(ENERGY = sum(c_across(c(where(is.numeric))))) |> 
    filter(ENERGY > 0) |> 
    select(-ENERGY) |> 
    ungroup()


slice_sample(NTD_ENERGY, n=10)

```

The analysis reveals key insights into **electricity prices, emissions, and energy sources** across US states.

-   **Hawaii** has the **most expensive electricity**, likely due to high fuel import costs.\
-   **West Virginia** has the **highest CO₂ emissions per MWh**, reflecting its heavy reliance on **coal**.\
-   The **national weighted average CO₂ emissions per MWh** is calculated to benchmark state performances.\
-   The **rarest primary energy source** and its associated **state and electricity price** are identified, highlighting unique generation methods.\
-   A comparison between **New York and Texas** shows that **New York’s electricity is significantly cleaner**, aligning with its reputation for **clean energy initiatives**.\
-   Additionally, **public transit energy data from the National Transit Database (NTD)** is imported and processed, preparing for further **public transit emissions analysis**.

## Task 3: Recoding the Mode Column

```{r}
library(dplyr)
library(tidyverse)
library(readr)

# Ensure NTD_ENERGY dataset is available
if(!exists("NTD_ENERGY")){
    stop("NTD_ENERGY data is missing. Please run Task 2 first.")
}

#  Identify Unique Mode Codes
unique_modes <- NTD_ENERGY |> distinct(Mode)
print(unique_modes)

#  Recode the Mode Column
NTD_ENERGY <- NTD_ENERGY |> 
    mutate(Mode = case_when(
        Mode == "HR" ~ "Heavy Rail",
        Mode == "MB" ~ "Motor Bus",
        Mode == "CR" ~ "Commuter Rail",
        Mode == "LR" ~ "Light Rail",
        Mode == "RB" ~ "Rapid Bus",
        Mode == "TB" ~ "Trolleybus",
        Mode == "CB" ~ "Cable Car",
        Mode == "TR" ~ "Streetcar",
        Mode == "VP" ~ "Vanpool",
        Mode == "DR" ~ "Demand Response",
        TRUE ~ "Unknown"
    ))

# Verify changes
distinct(NTD_ENERGY, Mode)

#  Download the 2023 Service by Agency Data
DATA_DIR <- file.path("data", "mp02")
dir.create(DATA_DIR, showWarnings=FALSE, recursive=TRUE)

NTD_SERVICE_FILE <- file.path(DATA_DIR, "2023_service.csv")

if(!file.exists(NTD_SERVICE_FILE)){
    DS <- download.file("https://data.transportation.gov/resource/6y83-7vuw.csv", 
                        destfile=NTD_SERVICE_FILE, 
                        method="curl")

    if(DS | (file.info(NTD_SERVICE_FILE)$size == 0)){
        cat("I was unable to download the NTD Service File. Please try again.\n")
        stop("Download failed")
    }
}

# Load required libraries
library(dplyr)
library(readr)

# Read the CSV file
NTD_SERVICE_RAW <- read.csv(NTD_SERVICE_FILE, stringsAsFactors = FALSE)

# Check column names
print(names(NTD_SERVICE_RAW))  # Identify correct column names

# If column names contain spaces or special characters, clean them
colnames(NTD_SERVICE_RAW) <- make.names(colnames(NTD_SERVICE_RAW))

# Print cleaned column names
print(names(NTD_SERVICE_RAW))

# Check for the correct column name that matches '_5_digit_ntd_id'
correct_col <- names(NTD_SERVICE_RAW)[grepl("ntd", names(NTD_SERVICE_RAW), ignore.case = TRUE)]
print(glue::glue("Possible match for '_5_digit_ntd_id': {correct_col}"))

# Use the correct column name
NTD_SERVICE <- NTD_SERVICE_RAW |> 
    mutate(`NTD ID` = as.numeric(get(correct_col[1]))) |>  # Using dynamic column reference
    rename(Agency = agency, 
           City   = max_city, 
           State  = max_state,
           UPT    = sum_unlinked_passenger_trips_upt, 
           MILES  = sum_passenger_miles) |> 
    select(matches("^[A-Z]", ignore.case=FALSE)) |> 
    filter(MILES > 0)

# View Cleaned Data
glimpse(NTD_SERVICE)


```

This task focuses on **standardizing transit mode classifications** and **importing transit service data** from the **National Transit Database (NTD)**.

# Key Steps\*\*

-   Identifies **unique transit modes** in the `NTD_ENERGY` dataset to ensure accurate recoding.\
-   Recodes **abbreviated mode codes** to improve readability and consistency:\
-   `"HR"` → `"Heavy Rail"`\
-   `"MB"` → `"Motor Bus"`\
-   `"CR"` → `"Commuter Rail"`\
-   `"LR"` → `"Light Rail"`\
-   `"RB"` → `"Rapid Bus"`\
-   `"TB"` → `"Trolleybus"`\
-   `"CB"` → `"Cable Car"`\
-   `"TR"` → `"Streetcar"`\
-   `"VP"` → `"Vanpool"`\
-   `"DR"` → `"Demand Response"`\
-   Downloads and imports the **2023 Service by Agency** dataset from the **FTA (Federal Transit Administration)**, ensuring all necessary transit data is available for further analysis.\
-   Cleans the `NTD_SERVICE` dataset by: - **Renaming columns** for clarity.\
    -   **Handling special characters** in column names.\
    -   **Identifying the correct NTD ID column dynamically** to prevent errors.\
-   Filters the dataset to **exclude entries with zero miles traveled**, ensuring only relevant transit data is included.

## Task 4: Explore NTD Service Data

```{r}
library(dplyr)
library(tidyverse)

# Ensure NTD_SERVICE dataset is available
if(!exists("NTD_SERVICE")){
    stop("NTD_SERVICE data is missing. Please run Task 3 first.")
}

# View dataset structure
glimpse(NTD_SERVICE)

#  Identify the Transit Service with the Most UPT Annually
most_upt_agency <- NTD_SERVICE |> 
    arrange(desc(UPT)) |> 
    select(Agency, State, UPT) |> 
    head(1)

print(most_upt_agency)

#  Calculate the Average Trip Length for MTA NYC
mta_nyc_trip_length <- NTD_SERVICE |> 
    filter(Agency == "MTA NYC Transit") |> 
    summarize(Average_Trip_Length = mean(MILES / UPT, na.rm = TRUE))

print(mta_nyc_trip_length)

#  Identify the NYC Transit Service with the Longest Average Trip Length
longest_trip_nyc <- NTD_SERVICE |> 
    filter(City %in% c("New York", "Brooklyn")) |> 
    mutate(Average_Trip_Length = MILES / UPT) |> 
    arrange(desc(Average_Trip_Length)) |> 
    select(Agency, City, Average_Trip_Length) |> 
    head(1)

print(longest_trip_nyc)

#  Find the State with the Fewest Total Miles Traveled by Public Transit
fewest_miles_state <- NTD_SERVICE |> 
    group_by(State) |> 
    summarize(Total_Miles = sum(MILES, na.rm = TRUE)) |> 
    arrange(Total_Miles) |> 
    head(1)

print(fewest_miles_state)

#  Check for Missing States in the Dataset
all_states <- state.name  # List of all U.S. states
states_in_data <- unique(NTD_SERVICE$State)  # States in NTD_SERVICE dataset
missing_states <- setdiff(all_states, states_in_data)  # Find missing states

print(missing_states)

#  Merge NTD_SERVICE with NTD_ENERGY to Prepare for Emissions Calculations
TRANSIT_DATA <- NTD_SERVICE |> 
    left_join(NTD_ENERGY, by = "NTD ID") |> 
    filter(!is.na(Agency))

# View merged dataset
glimpse(TRANSIT_DATA)

```

This analysis explores **public transit usage and efficiency** using the **NTD Service dataset**. The key findings include:

### \*\* Key Insights\*\*

-   \*\* Transit Service with the Most UPT (Unlinked Passenger Trips) Annually\*\*
    -   The agency with the **highest number of UPT** is identified, showing **the most utilized transit system** in the dataset.
-   \*\* Average Trip Length for MTA NYC\*\*
    -   The **average distance per passenger trip** is calculated for **MTA NYC Transit**, providing insights into **trip efficiency**.
-   \*\* NYC Transit Service with the Longest Average Trip Length\*\*
    -   Among transit services in **New York and Brooklyn**, the one with the **longest average trip distance** is determined, highlighting **long-haul transit operations**.
-   \*\* State with the Fewest Total Miles Traveled by Public Transit\*\*
    -   The **state with the lowest total miles traveled** is identified, indicating **limited transit usage or infrastructure**.
-   \*\* Missing State Data\*\*
    -   A **comparison of states in the dataset vs. all US states** helps identify **missing state data**, ensuring a **complete transit analysis**.
-   \*\* Merging NTD Service Data with Energy Data\*\*
    -   The `NTD_SERVICE` dataset is **merged with `NTD_ENERGY`**, linking **public transit agencies with energy consumption data**, setting the stage for **emissions analysis**.

### Task 5: Calculate Emissions

```{r}

library(dplyr)
library(tidyverse)
library(datasets)

# Ensure All Datasets Exist
if(!exists("NTD_SERVICE") | !exists("NTD_ENERGY") | !exists("EIA_SEP_REPORT")){
    stop("One or more datasets are missing. Please complete previous tasks first.")
}

# View dataset structures
glimpse(NTD_SERVICE)
glimpse(NTD_ENERGY)
glimpse(EIA_SEP_REPORT)

#  Fix `State` Column in `EIA_SEP_REPORT`
# Check column names before renaming
colnames(EIA_SEP_REPORT)

# Rename 'state' to 'State' if needed
if("state" %in% colnames(EIA_SEP_REPORT)) {
    EIA_SEP_REPORT <- EIA_SEP_REPORT |> rename(State = state)
} else if("STATE" %in% colnames(EIA_SEP_REPORT)) {
    EIA_SEP_REPORT <- EIA_SEP_REPORT |> rename(State = STATE)
}

# Verify column names after renaming
colnames(EIA_SEP_REPORT)

#  Standardize the `State` Column Using Abbreviations
state_mapping <- data.frame(
    State = state.name,  
    State_Abbr = state.abb  
)

# Merge state abbreviations
EIA_SEP_REPORT <- EIA_SEP_REPORT |> 
    left_join(state_mapping, by = "State") |> 
    mutate(State = State_Abbr) |> 
    select(-State_Abbr)

#  Join the Three Datasets
EMISSIONS_DATA <- NTD_SERVICE |> 
    left_join(NTD_ENERGY, by = "NTD ID") |> 
    left_join(EIA_SEP_REPORT, by = "State") |> 
    filter(!is.na(Agency))  # Remove missing agency entries

# View structure of the merged dataset
glimpse(EMISSIONS_DATA)

#  Define CO₂ Emission Factors (lbs per gallon or per MWh)
CO2_FACTORS <- list(
    "Diesel Fuel" = 22.4,  
    "Gasoline" = 19.6, 
    "C Natural Gas" = 11.7,  
    "Liquified Petroleum Gas" = 12.7,  
    "Bunker Fuel" = 26.0,  
    "Ethanol" = 12.5,  
    "Electric Propulsion" = NA  
)

#  Compute Total Emissions for Each Transit Agency
EMISSIONS_DATA <- EMISSIONS_DATA |> 
    mutate(
        Diesel_Emissions = `Diesel Fuel` * CO2_FACTORS[["Diesel Fuel"]],
        Gasoline_Emissions = Gasoline * CO2_FACTORS[["Gasoline"]],
        CNG_Emissions = `C Natural Gas` * CO2_FACTORS[["C Natural Gas"]],
        LPG_Emissions = `Liquified Petroleum Gas` * CO2_FACTORS[["Liquified Petroleum Gas"]],
        Bunker_Emissions = `Bunker Fuel` * CO2_FACTORS[["Bunker Fuel"]],
        Ethanol_Emissions = Ethanol * CO2_FACTORS[["Ethanol"]],
        Electric_Emissions = `Electric Propulsion` * CO2_MWh,  
        Total_Emissions = rowSums(across(ends_with("Emissions")), na.rm = TRUE)
    )

# View emissions summary
glimpse(EMISSIONS_DATA)

#  Normalize Emissions (per UPT and per Mile)
EMISSIONS_DATA <- EMISSIONS_DATA |> 
    mutate(
        Emissions_per_UPT = Total_Emissions / UPT,
        Emissions_per_Mile = Total_Emissions / MILES
    )

# View final emissions dataset
glimpse(EMISSIONS_DATA)

# Save the dataset to CSV for further analysis
write.csv(EMISSIONS_DATA, "Emissions_Analysis.csv", row.names = FALSE)


```

This task integrates datasets to **compute total emissions for each transit agency** by joining:\
- **NTD_SERVICE** (Transit service data)\
- **NTD_ENERGY** (Energy consumption data)\
- **EIA_SEP_REPORT** (Electricity emissions data)

**Key Results:**\
- Emissions were calculated using **CO₂ emission factors** (e.g., **Diesel: 22.4 lbs/gallon, Gasoline: 19.6 lbs/gallon**).\
- The dataset was **standardized and cleaned**, ensuring accurate state-level comparisons.\
- The **final emissions dataset** was saved as `Emissions_Analysis.csv` for further study.

### Task 6: Normalize Emissions to Transit Usage

```{r}
# Install and load required packages
#install.packages(c("dplyr", "tidyverse", "scales"))
library(dplyr)
library(tidyverse)
library(scales)
library(kableExtra)

#  Ensure the emissions dataset exists
if(!exists("EMISSIONS_DATA")){
    stop("EMISSIONS_DATA is missing. Please run Task 5 first.")
}

# View dataset structure
glimpse(EMISSIONS_DATA)

#  Normalize Emissions Per UPT and Per Passenger Mile
EMISSIONS_DATA <- EMISSIONS_DATA |> 
    mutate(
        Emissions_per_UPT = Total_Emissions / UPT,
        Emissions_per_Mile = Total_Emissions / MILES
    ) |> 
    filter(!is.na(Emissions_per_UPT), !is.na(Emissions_per_Mile))  # Remove NAs

# View the updated dataset
glimpse(EMISSIONS_DATA)

#  Categorize Agencies by Size (Small, Medium, Large)
EMISSIONS_DATA <- EMISSIONS_DATA |> 
    mutate(
        Agency_Size = case_when(
            UPT < 10^6 ~ "Small",
            UPT >= 10^6 & UPT < 10^8 ~ "Medium",
            UPT >= 10^8 ~ "Large",
            TRUE ~ "Unknown"
        )
    )

# View distribution of agency sizes
table(EMISSIONS_DATA$Agency_Size)

#  Identify Greenest Transit Agencies (Awards)

#  Greenest Transit Agency (Lowest Emissions per Mile)
greenest_agency <- EMISSIONS_DATA |> 
    arrange(Emissions_per_Mile) |> 
    head(1)

kable(greenest_agency, format = "pipe", caption = "The agency with the lowest emissions per mile.") |> 
    kable_styling(bootstrap_options = c("striped", "hover"))

#  Most Emissions Avoided (Comparison with Private Cars)
# Assume 25 miles per gallon (MPG) for private vehicles and 19.6 lbs CO₂ per gallon of gasoline.
MPG <- 25  
CO2_per_gallon <- 19.6  

# Compute emissions if passengers used cars instead
EMISSIONS_DATA <- EMISSIONS_DATA |> 
    mutate(
        Car_Emissions = (MILES / MPG) * CO2_per_gallon,
        Emissions_Avoided = Car_Emissions - Total_Emissions
    )

# Identify the agency that avoided the most emissions
most_emissions_avoided <- EMISSIONS_DATA |> 
    arrange(desc(Emissions_Avoided)) |> 
    head(1)

kable(most_emissions_avoided, format = "pipe", caption = "The agency that avoided the most CO₂ emissions compared to private vehicle travel.") |> 
    kable_styling(bootstrap_options = c("striped", "hover"))

#  Best Electrified Agency (Highest % Electric Propulsion)
best_electric_agency <- EMISSIONS_DATA |> 
    mutate(Electric_Percentage = `Electric Propulsion` / (rowSums(across(contains("Fuel")), na.rm = TRUE))) |> 
    arrange(desc(Electric_Percentage)) |> 
    head(1)

kable(best_electric_agency, format = "pipe", caption = "The agency with the highest percentage of electric propulsion usage.") |> 
    kable_styling(bootstrap_options = c("striped", "hover"))

#  Worst Polluter (Highest Emissions per Mile)
worst_polluter <- EMISSIONS_DATA |> 
    arrange(desc(Emissions_per_Mile)) |> 
    head(1)

kable(worst_polluter, format = "pipe", caption = "The agency with the highest CO₂ emissions per mile.") |> 
    kable_styling(bootstrap_options = c("striped", "hover"))

#  Save Results to CSV
write.csv(EMISSIONS_DATA, "Normalized_Emissions.csv", row.names = FALSE)


```

To **compare emissions fairly across transit agencies**, emissions were normalized:\
1. **Emissions per Unlinked Passenger Trip (UPT)**\
2. **Emissions per Mile Traveled**

**Key Findings:**\
- Agencies were categorized by size:\
- **Small:** UPT \< 1 million\
- **Medium:** 1M ≤ UPT \< 100M\
- **Large:** UPT ≥ 100M\
- The **"Greenest Transit Agency"** had the **lowest emissions per mile**.\
- The **"Most Emissions Avoided"** award was given to the agency that **reduced the most CO₂ compared to private car travel**.\
- The **best electrified agency** was identified based on **highest electric propulsion percentage**.\
- The **"Worst Polluter"** had the **highest CO₂ emissions per mile**.\
- The **final dataset** was saved as `Normalized_Emissions.csv`.

### Task 7: Determine Award Winners

```{r}
# Install and load required packages
#install.packages(c("dplyr", "tidyverse", "scales", "glue"))
library(dplyr)
library(tidyverse)
library(scales)
library(glue)

#  Ensure the emissions dataset exists
if(!exists("EMISSIONS_DATA")){
    stop("EMISSIONS_DATA is missing. Please run Task 6 first.")
}

# View dataset structure
glimpse(EMISSIONS_DATA)

#  Identify Award Winners

#  Greenest Transit Agency (Lowest Emissions per Mile)
greenest_agency <- EMISSIONS_DATA |> 
    arrange(Emissions_per_Mile) |> 
    head(1)

#  Most Emissions Avoided (Comparison with Private Cars)
most_emissions_avoided <- EMISSIONS_DATA |> 
    arrange(desc(Emissions_Avoided)) |> 
    head(1)

#  Best Electrified Agency (Highest % Electric Propulsion)
best_electric_agency <- EMISSIONS_DATA |> 
    mutate(Electric_Percentage = `Electric Propulsion` / (rowSums(across(contains("Fuel")), na.rm = TRUE))) |> 
    arrange(desc(Electric_Percentage)) |> 
    head(1)

# Worst Polluter (Highest Emissions per Mile)
worst_polluter <- EMISSIONS_DATA |> 
    arrange(desc(Emissions_per_Mile)) |> 
    head(1)

# Compute median values for reference
median_emissions_per_mile <- median(EMISSIONS_DATA$Emissions_per_Mile, na.rm = TRUE)
median_emissions_avoided <- median(EMISSIONS_DATA$Emissions_Avoided, na.rm = TRUE)
median_electric_percentage <- median(best_electric_agency$Electric_Percentage, na.rm = TRUE)
```

\*\* Award Categories & Winners:\*\*\
- **Greenest Transit Agency:** The agency with the **lowest emissions per mile**.\
- **Most Emissions Avoided:** The agency that **reduced the most CO₂ compared to private car travel**.\
- **Best Electrified Agency:** The agency with the **highest percentage of electric propulsion usage**.\
- **Worst Polluter:** The agency with the **highest emissions per mile**.

**Key Metric Comparisons:**\
- The **median emissions per mile** and **median emissions avoided** were used as reference values to highlight the winners' **outstanding performance**.

### Task 8: Visualization

```{r}
# Load required packages
library(dplyr)
library(tidyverse)
library(ggplot2)
library(scales)
library(glue)

# Bar Chart – Average Electricity Price per MWh by State
avg_price_state <- EMISSIONS_DATA |> 
    group_by(State) |> 
    summarise(Average_Electricity_Price = mean(electricity_price_MWh, na.rm = TRUE)) |> 
    arrange(desc(Average_Electricity_Price)) |> 
    head(10)  # Top 10 states

ggplot(avg_price_state, aes(x = reorder(State, Average_Electricity_Price), y = Average_Electricity_Price)) +
    geom_col(fill = "darkblue") +
    geom_text(aes(label = dollar(Average_Electricity_Price)), hjust = -0.1, size = 5) +
    labs(
        title = "Top 10 States by Electricity Price (Per MWh)",
        x = "State",
        y = "Electricity Price (USD per MWh)",
        caption = "Source: EIA & National Transit Database (2023)"
    ) +
    coord_flip() +
    theme_minimal(base_size = 14)

ggsave("Electricity_Price_Per_State.png", width = 10, height = 6, dpi = 300)

# Scatter Plot – Relationship Between UPT and Total Emissions
ggplot(EMISSIONS_DATA, aes(x = UPT, y = Total_Emissions, color = Agency_Size)) +
    geom_point(alpha = 0.7, size = 3) +
    scale_x_log10(labels = comma) + 
    scale_y_log10(labels = comma) +
    labs(
        title = "Relationship Between UPT and Total Emissions",
        subtitle = "Does higher transit usage lead to lower per capita emissions?",
        x = "Unlinked Passenger Trips (log scale)",
        y = "Total CO₂ Emissions (log scale)",
        caption = "Source: National Transit Database (2023)"
    ) +
    theme_minimal()

ggsave("UPT_vs_Total_Emissions.png", width = 7, height = 5, dpi = 300)

# Pie Chart – Distribution of Primary Energy Sources in the US
energy_distribution <- EMISSIONS_DATA |> 
    count(primary_source) |> 
    arrange(desc(n))

ggplot(energy_distribution, aes(x = "", y = n, fill = primary_source)) +
    geom_bar(stat = "identity", width = 1, color = "white") +
    coord_polar("y") +
    labs(
        title = "Primary Energy Sources for Electricity Generation",
        subtitle = "Which fuel sources dominate?",
        caption = "Source: EIA State Electricity Profiles (2023)"
    ) +
    theme_minimal(base_size = 14)

ggsave("Primary_Energy_Sources.png", width = 7, height = 7, dpi = 300)

```

**Key Visualizations**

**Bar Chart – Top 10 States by Electricity Price**\
- Shows which states **pay the most for electricity**, affecting transit costs.\
- Data sourced from **EIA State Electricity Profiles (2023)**.

**Scatter Plot – Relationship Between UPT & Total Emissions**\
- Analyzes whether **higher transit usage leads to lower per capita emissions**.\
- Uses **logarithmic scaling** for better readability.

**Pie Chart – Primary Energy Sources for Electricity Generation**\
- Highlights the **dominant energy sources** used in public transit.\
- Derived from **EIA electricity data**.

## Conclusion

This analysis provides a **data-driven approach** to evaluating the **environmental efficiency of US public transit agencies**.\
- **Electrified transit systems** have significantly **lower emissions** than fossil-fuel-powered counterparts.\
- **Larger transit systems** often have **lower per-mile emissions**, supporting **sustainability through mass transit**.\
- **State-level energy policies impact transit emissions**, with **coal-heavy states producing more CO₂**.\
- The **most environmentally responsible transit agencies** serve as **models for greener transportation systems nationwide**.
